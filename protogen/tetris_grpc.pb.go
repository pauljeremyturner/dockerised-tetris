// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: proto/tetris.proto

package protogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Move_Move_FullMethodName = "/Move/Move"
)

// MoveClient is the client API for Move service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MoveClient interface {
	Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error)
}

type moveClient struct {
	cc grpc.ClientConnInterface
}

func NewMoveClient(cc grpc.ClientConnInterface) MoveClient {
	return &moveClient{cc}
}

func (c *moveClient) Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error) {
	out := new(MoveResponse)
	err := c.cc.Invoke(ctx, Move_Move_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MoveServer is the server API for Move service.
// All implementations must embed UnimplementedMoveServer
// for forward compatibility
type MoveServer interface {
	Move(context.Context, *MoveRequest) (*MoveResponse, error)
	mustEmbedUnimplementedMoveServer()
}

// UnimplementedMoveServer must be embedded to have forward compatible implementations.
type UnimplementedMoveServer struct {
}

func (UnimplementedMoveServer) Move(context.Context, *MoveRequest) (*MoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (UnimplementedMoveServer) mustEmbedUnimplementedMoveServer() {}

// UnsafeMoveServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MoveServer will
// result in compilation errors.
type UnsafeMoveServer interface {
	mustEmbedUnimplementedMoveServer()
}

func RegisterMoveServer(s grpc.ServiceRegistrar, srv MoveServer) {
	s.RegisterService(&Move_ServiceDesc, srv)
}

func _Move_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoveServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Move_Move_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoveServer).Move(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Move_ServiceDesc is the grpc.ServiceDesc for Move service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Move_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Move",
	HandlerType: (*MoveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Move",
			Handler:    _Move_Move_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/tetris.proto",
}

const (
	Game_StartGame_FullMethodName = "/Game/StartGame"
)

// GameClient is the client API for Game service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameClient interface {
	StartGame(ctx context.Context, in *NewGameRequest, opts ...grpc.CallOption) (Game_StartGameClient, error)
}

type gameClient struct {
	cc grpc.ClientConnInterface
}

func NewGameClient(cc grpc.ClientConnInterface) GameClient {
	return &gameClient{cc}
}

func (c *gameClient) StartGame(ctx context.Context, in *NewGameRequest, opts ...grpc.CallOption) (Game_StartGameClient, error) {
	stream, err := c.cc.NewStream(ctx, &Game_ServiceDesc.Streams[0], Game_StartGame_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gameStartGameClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Game_StartGameClient interface {
	Recv() (*GameUpdateResponse, error)
	grpc.ClientStream
}

type gameStartGameClient struct {
	grpc.ClientStream
}

func (x *gameStartGameClient) Recv() (*GameUpdateResponse, error) {
	m := new(GameUpdateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GameServer is the server API for Game service.
// All implementations must embed UnimplementedGameServer
// for forward compatibility
type GameServer interface {
	StartGame(*NewGameRequest, Game_StartGameServer) error
	mustEmbedUnimplementedGameServer()
}

// UnimplementedGameServer must be embedded to have forward compatible implementations.
type UnimplementedGameServer struct {
}

func (UnimplementedGameServer) StartGame(*NewGameRequest, Game_StartGameServer) error {
	return status.Errorf(codes.Unimplemented, "method StartGame not implemented")
}
func (UnimplementedGameServer) mustEmbedUnimplementedGameServer() {}

// UnsafeGameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServer will
// result in compilation errors.
type UnsafeGameServer interface {
	mustEmbedUnimplementedGameServer()
}

func RegisterGameServer(s grpc.ServiceRegistrar, srv GameServer) {
	s.RegisterService(&Game_ServiceDesc, srv)
}

func _Game_StartGame_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NewGameRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameServer).StartGame(m, &gameStartGameServer{stream})
}

type Game_StartGameServer interface {
	Send(*GameUpdateResponse) error
	grpc.ServerStream
}

type gameStartGameServer struct {
	grpc.ServerStream
}

func (x *gameStartGameServer) Send(m *GameUpdateResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Game_ServiceDesc is the grpc.ServiceDesc for Game service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Game_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Game",
	HandlerType: (*GameServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartGame",
			Handler:       _Game_StartGame_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/tetris.proto",
}
